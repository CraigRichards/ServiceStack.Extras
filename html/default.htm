<html>
<head>
    <title>Open source .NET and Mono web services framework</title>
    <link rel="stylesheet" type="text/css" href="default.css" />
    <script type="text/javascript" src="http://code.jquery.com/jquery-1.5.min.js"></script>
</head>
<body class="host">

<div id="header">
	<a id="btn-googlecode" href="https://github.com/ServiceStack/ServiceStack" title="go to service stack project on GitHub"><img src="btn-github.png" alt="GitHub project" alt="ServiceStack GitHub logo" /></a>

	<a href="http://www.servicestack.net" title="Open source Mono and .NET web service framework"><img src="logo-servicestack.png" alt="Service Stack" /></a>
	<h3 id="logo-title">Opensource .NET and Mono REST Web Services framework</h3>

	<div id="breadcrumbs">
		<a href="http://www.servicestack.net" class="selected">servicestack.net</a>
		| <a href="http://www.servicestack.net/showcase/">showcase</a>
        | <a href="http://www.servicestack.net/ServiceStack.Hello/">hello world tutorial</a>
        | <a href="http://www.servicestack.net/ServiceStack.MovieRest/">rest example</a>
        | <a href="http://www.servicestack.net/monotouch/remote-info/">monotouch tutorial</a>
		| <a href="https://github.com/ServiceStack/ServiceStack">github.com</a>
		| <a href="http://www.servicestack.net/mythz_blog/">blog</a>
	</div>
</div>

<div id="quote">-- "Putting the fun back into .NET development!"</div>

<div id="content">

<h3 id="from-tweets">Latest Tweets from <a href="http://twitter.com/servicestack">@ServiceStack</a>:</h3>
<div id="jstweets">
</div>

<div id="img-overview" style="clear:right;">
	<a href="overview.htm"><img src="ss-overview.png" alt="Service Stack Overview" title="Service Stack Overview" /></a>
	<a href="overview.htm">view architecture overview</a>
</div>

<h3 class="intro">A modern, code-first, DTO-driven, web services framework encouraging best-practices development to create high-perfomance, scalable REST web services</h3>

<p>
	With a primary focus on <strong>simplicity and speed</strong>, ServiceStack allows development of web services code-first, using normal C# objects.
	Using strong-typed DTO's provides a well-defined contract for your web service as well as enabling us to infer a richer intelligence about them,
	allowing the auto-generation of documentation metadata pages, auto-configuration of popular formats (XML,JSON,HTML,CSV,JSV) and endpoints (REST,RPC,SOAP),
	all <strong>without any configuration or code-gen required</strong>.
	All whilst still providing a clean, succinct, strong-typed API, for a friction-free development experience.
</p>

<p>
	From end-to-end it's built using only the fastest open source components available.
	Avoiding all unnecessary overheads where possible, e.g. chosing only to use .NET's raw, lightweight <b>IHttpHandlers</b>.
</p>

<p>
	When the .NET Framework fails to provide efficient implementations in our pipeline, we replace it with our own efficient implementations.
	As done in <strong><a href="https://github.com/ServiceStack/ServiceStack.Text">ServiceStack.Text</a></strong>
	now maintaining the fastest Text serializers available for .NET - now with JSON, CSV, JSV formats that are over
	<strong><a href="http://www.servicestack.net/mythz_blog/?p=344">3.6x faster then the fastest JSON serializer in .NET</a></strong>.
</p>

<p>
	Out-of-the-box it's also bundled with libraries to assist the development of high-performance and scalable web services with
	<a href="https://github.com/ServiceStack/ServiceStack/wiki/Caching">a multitude of caching options</a>
	as well as the leading <a href="https://github.com/ServiceStack/ServiceStack.Redis">ServiceStack.Redis C# Client</a>
	for <a href="http://redis.io">Redis</a> - <a href="http://redis.io/topics/benchmarks">The fastest NoSQL DB in the world</a>.
</p>

<p>
	Developed in the modern era, it has first-class support for IOC, testing and convention-based development
	enabling you to to develop your webservices entirely using pure, clean <acronym title="Plain Old CSharp Objects">POCO</acronym>
	DataContract's, decoupled from the endpoint that it is hosted on.
</p>

<p>
	These same <acronym title="Data Tranfer Objects">DTO</acronym>'s can later be shared with any .NET client application
	eliminating the need for any generated code.
</p>

<p>
	<strong><a href="http://www.servicestack.net/ServiceStack.Hello">Creating a web service</a></strong>
	 is done by adding a new Request and Response DataContract and the <strong>Service</strong> to handle them.
	With just a single build and no other configuration required, they are immediately discoverable and callable.
</p>

<p>
	Services can run on both
	<b><a href="http://www.mono-project.com">Mono</a></b> and the <b><a href="http://www.microsoft.com/NET/">.NET Framework</a></b>
	and be hosted in either in a stand-alone mode or together with an existing ASP.NET Web Application framework.
	or detached from a web server, inside a Windows Service or Console application.
</p>

<h2><a href="http://www.servicestack.net/showcase/">ServiceStack Showcase</a></h2>

<div id="download">
	<h2>Download the latest release</h2>

	<span>
		Service Stack is packaged in a single ServiceStack.zip, an
		easy drop-in into any .NET project.
	</span>

	<a id="btn-download" href="https://github.com/ServiceStack/ServiceStack.Examples/downloads">
		<img src="btn-download.gif" alt="Download ServiceStack.Examples.zip" />
	</a>
</div>

<ul>
    <li><a href="http://www.servicestack.net/ServiceStack.Hello/">Hello world tutorial</a></li>
    <li><a href="http://www.servicestack.net/RestFiles/">GitHub-like browser to manage remote filesystem over REST</a></li>
    <li><a href="http://www.servicestack.net/ServiceStack.MovieRest/">REST Web Service example</a></li>
    <li><a href="http://www.servicestack.net/RedisStackOverflow/">StackOverflow clone created entirely with Redis and jQuery</a></li>
    <li><a href="http://www.servicestack.net/ServiceStack.Northwind/">ServiceStack features using a real-world dataset</a></li>
	<li><a href="http://www.servicestack.net/RedisAdminUI/AjaxClient/">Live preview of Redis Admin UI (Service Stack + Redis)</a></li>
	<li><a href="http://www.servicestack.net/ServiceStack.Examples.Clients/">Live preview of Service Stack</a></li>
	<li><a href="http://www.servicestack.net/monotouch/remote-info/">Calling Web Services in MonoTouch</a></li>
	<li><a href="https://github.com/ServiceStack/ServiceStack">ServiceStack source code hosted on Git Hub</a></li>
	<li><a href="http://www.servicestack.net/mythz_blog/">Developer blog</a></li>
	<li><a href="http://www.ajaxstack.com">Ajax Stack</a></li>
	<li><strong><a href="http://groups.google.com/group/servicestack">ServiceStack Mail List and Google Group</a></strong></li>
</ul>

<div id="sub-components" class="section">
	<h2>Running on high performance parts</h2>
	<span class="summary">
		Included in ServiceStack are a number of other libraries that are useful in developing
		high-performance scalable web services.<br />
		These sub-components are included in ServiceStack.dll but are also available to download seperately.
	</span>

	<div id="typeserializer" class="sub-component">
		<a class="lnk-component" title="ServiceStack.Text.TypeSerializer" href="https://github.com/ServiceStack/ServiceStack.Text">Text</a>
		<div>
			The fastest and most compact JSON &amp; JSV <strong>Text Serializers</strong> for .NET<br/>

			<dl>
				<dd>3.5x quicker and 2.6x smaller than the .NET XML DataContractSerializer</dd>
				<dd>5.3x quicker and 1.3x smaller than the .NET JSON DataContractSerializer </dd>
				<dd>
					<em><a href="http://www.servicestack.net/benchmarks/NorthwindDatabaseRowsSerialization.1000000-times.2010-02-06.html">view the benchmarks</a></em>
				</dd>
			</dl>

			TypeSerializer's main goals are:
			<ul>
				<li>Fast</li>
				<li>Compact</li>
				<li>Human readable and writeable, self-describing text format</li>
				<li>Resilient to schema changes</li>
				<li>Non-invasive and configuration-free</li>
			</ul>
		</div>
	</div>

	<div id="redis" class="sub-component">
		<a class="lnk-component" title="ServiceStack.Redis" href="https://github.com/ServiceStack/ServiceStack.Redis">Redis</a>
		<div>
			<a href="http://code.google.com/p/redis/">Redis</a> is arguably the best key-value store to come from the NoSQL movement.
			Similar to memcached but the dataset is not volatile. Values can either be strings lists, sets, or ordered sets.

			<br /><br />
			ServiceStack.Redis is fast, rich Opensource C# Redis client:

			<ul>
				<li>Native support for persisting POCO objects</li>
				<li>Has both low-level raw bytes and high-level typed access</li>
				<li>Expose Redis server-side lists &amp; sets as IList&lt;&gt; ICollection&lt;&gt;</li>
				<li>Rich API support</li>
				<li>Comprehensive regression and test suite</li>
			</ul>
		</div>
	</div>

	<div id="ormlite" class="sub-component">
		<a class="lnk-component" href="https://github.com/ServiceStack/ServiceStack.OrmLite">OrmLite</a>
		<div>


			A fast, convention-based, configuration-free <acronym title="Plain Old CSharp Objects">POCO</acronym>
			<acronym title="Object Relational Mapper">ORM</acronym> providing lightweight extension methods
			on top of <code class="inline">IDbCommand</code> and <code class="inline">IDbConnection</code> classes.
			It uses standard Data Annotation attributes simplifying the effort required to access an <acronym title="Relational Database Management System">RDBMS</acronym>.
			<br />
			<br />
			OrmLite is focused on it's core objectives:
			<ul>
				<li>Performance - with support for indexes, text blobs, etc.</li>
				<li>Simplicity - with minimal, convention-based attribute configuration</li>
				<li>Expressive power and flexibility - with access to IDbCommand and raw SQL</li>
				<li>Portable - supports multiple dbs running on both .NET and Mono platforms.</li>
			</ul>
		</div>
	</div>

	<div id="caching" class="sub-component">
		<a class="lnk-component" href="https://github.com/ServiceStack/ServiceStack/wiki/Caching">Caching</a>
		<div>
			As caching is an essential technology in the development of high-performance web services,
			Service Stack has a number of different caching options available that each share the
			same common client interface for the following cache providers:
			<br /><br />

			<ul>
				<li>Memcached - The tried and tested most widely used cache provider</li>
				<li>Redis - The hottest and fastest new kid on the block</li>
				<li>In Memory Cache - Useful for single host web services and unit tests</li>
				<li>FileAndCacheTextManager - A two-tiered cache provider that has a backup filesystem cache</li>
			</ul>
		</div>
	</div>

</div>

</div>

<span class="r"></span>
<div id="footer">
	Copyright &copy; 2011 Liquidbit Ltd. All rights reserved.
</div>

<script type="text/javascript">
    $.getJSON("http://twitter.com/statuses/user_timeline.json?screen_name=ServiceStack&count=6&callback=?",
        function(data){
            var sb = "";
            $.each(data, function(i,item){
                var ct = item.text;
                ct = ct.replace(/https?:\/\/\S+/g,  '<a href="$&" target="_blank">$&</a>');
                ct = ct.replace(/\s(@)(\w+)/g,    ' <a onclick="javascript:pageTracker._trackPageview(\'/outgoing/twitter.com/\');" href="http://twitter.com/$2" target="_blank">@$2</a>');
                ct = ct.replace(/\s(#)(\w+)/g,    ' <a onclick="javascript:pageTracker._trackPageview(\'/outgoing/search.twitter.com/search?q=%23\');" href="http://search.twitter.com/search?q=%23$2" target="_blank">#$2</a>');

                sb += '<div>'+ct +'</div>';
            });
            $("#jstweets").append(sb);
        });
</script>

<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-7722718-7");
pageTracker._trackPageview();
} catch(err) {}</script>
</body>
</html>
