<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Open source .NET and Mono web services framework</title>
    <link rel="stylesheet" type="text/css" href="default.css" />
    <link href='http://fonts.googleapis.com/css?family=Droid+Sans' rel='stylesheet' type='text/css'>

	<style type="text/css">
		#content {
			margin:0;
			padding:0;
			width: auto;
		}
		#content a
		{
			color: #205AAF !important;
		}
		#content h3 {
			color: #666;
			margin: 10px 0 0 0;
			padding: 10px 0;
		}
		H2 {
			margin: 5px 0;
		}
		H4 {
			color: #205AAF;
		}
	</style>
</head>
<body class="host">

<div id="header">
	<a id="btn-googlecode" href="https://github.com/ServiceStack/" title="go to Service Stack projects on GitHub"><img src="btn-github.png" alt="GitHub project" alt="ServiceStack GitHub logo" /></a>

	<a href="http://www.servicestack.net" title="Open source Mono and .NET web service framework"><img src="logo-servicestack-xmas.png" alt="Service Stack" /></a>
	<h3 id="logo-title">Upgrade to a modern, faster, REST API-enabled ASP.NET MVC</h3>

	<div id="breadcrumbs">
		<a href="http://www.servicestack.net" class="selected">servicestack.net</a>
		| <a href="http://www.servicestack.net/docs/">documentation</a>
		| <a href="https://groups.google.com/forum/#!forum/servicestack">google group</a>
		| <a href="http://www.servicestack.net/mythz_blog/">blog</a>
	</div>
</div>

<div id="content">

	<h2>Super charge your ASP.NET MVC website with ServiceStack's MVC PowerPack!</h2>
	<span class="summary">
		ASP.NET MVC is a fine web framework but ships with some inefficient parts by default and failed to include others, vital in this Internet age! <br/>
		So like a .NET Santa, ServiceStack is here to fill gaps with goodies - because good frameworks need some love too :)
	</span>

	<img src="servicestack-powerpack.png" align="right" alt="ServiceStack MVC PowerPack!" />
	<p>TL;DR - ServiceStack boosts your MVC and is a dead-easy drop in with:</p>

    <div class="nuget-badge" style="width:550px;font-size:13px">
        <p>
            <code>PM&gt; Install-Package ServiceStack.Host.Mvc</code>
        </p>
    </div>


	<h3>The ugly side of ASP.NET MVC</h3>

	<ul>
		<li>
			No IOC resulting in static vars and an unhealthy fixation on XML Configuration.
		</li>	
		<li>
			No abstract, pluggable logging or configuration framework.
		</li>
		<li>
			Uses .NET's Framework slowest serializer for JSON serialization.
		</li>
		<li>
			Includes .NET's slowest ORM in Entity Framework.
		</li>
		<li>
			ASP.NET's Session provider has a 
			<a href="http://stackoverflow.com/questions/3629709/i-just-discovered-why-all-asp-net-websites-are-slow-and-i-am-trying-to-work-out">degrading performance issue by design.</a>
		</li>
		<li>
			ASP.NET's Cache and Session providers are untestable and require XML config.
		</li>
		<li>
			No REST or Web Service Framework for developing 3rd Party APIs.
		</li>
	</ul>

	<h3 style="color:#063;">ServiceStack brings the goods!</h3>

	<p>
		Even if you don't intend to use ServiceStack's Web Services, 

		having access to its testable components promote better code-practices 
		whist its high-performance parts will be readily available to solve your performance related issues.
	</p>

	<h4>Funq IOC</h4>
	<p>
		MVC was developed emphasizing <a href="http://www.codeproject.com/KB/interviews/Interview-Phil-Haack.aspx">separation of concerns and writing testable maintainable code</a> 
		however it falls at the last hurdle by not including an IOC.  Without an IOC you're likely to use test-inhibiting static variables and an over reliance on XML for configuraing your dependencies. <br/>
		Only the configurable parts of your application should be in your Web.config as code remains a superior way to define your applications dependencies which has the advantages of being debuggable and statically verifiable at compile-time.
	</p>
	<p>
		An IOC promotes better-designed, more testable code yet it only takes a little IOC to reap its great rewards. 
		As it makes a great first IOC, we've included <a href="https://twitter.com/#!/KZU">@kzu's</a> <a href="http://funq.codeplex.com/">Funq</a> because of its tiny size, 
		<a href="benchmarks/default.htm#munq">excellent perf and memory characteristics</a> that sports an intuitive, friendly, code-centric API. <br/>
	</p>
	<p>
		To use: register all your dependencies in the new 
		<a href="https://github.com/ServiceStack/ServiceStack/blob/master/NuGet/ServiceStack.Host.Mvc/content/App_Start/ServiceStackFramework.cs.pp#L46">AppHost</a> 
		which are then automatically binded to the public properties or contructor of your MVC Controllers or ServiceStack web services.
	</p>
	<p>
		A great resource if you're new to IOC/DI and TDD is Daniel Cazzulino ScreenCast series showing how he
		<a href="http://blogs.clariusconsulting.net/kzu/funq-screencast-series-on-how-to-building-a-di-container-using-tdd/">developed Funq using TDD</a>.
	</p>

	<h4>Abstract Logging and Configuration API</h4>
	<p>
		Even in the spirit of bind to interfaces, not implemenations, many .NET projects still have a hard dependency to their logging implementation. 
		We still don't think it's a good idea so we provide an 
		<a href="https://github.com/ServiceStack/ServiceStack.Logging">abstract logging framework</a> with Elmah, NLog, EventLog, Console, Debug and Null logging adapters.
	</p>
	<p>
		Whilst we include our own pluggable <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack/Configuration/AppSettings.cs">AppSettings</a>
		to provides high-level utility methods to read your Web.config's <b>&lt;appSetting/&gt;</b> values into a List, Dictionary or your own Custom Type using the 
		<a href="http://www.servicestack.net/docs/text-serializers/jsv-format">human friendly JSV format</a>.
	</p>

	<h4>Caching</h4>
	<p>
		Probably the most important facet in high-performance websites is Caching, which we feel should be a first-class concept, decoupled from the framework and made available like every other dependency so it remains testable, swappable and configurable without resorting to mandatory, rigid XML configuration and provider options.
	</p>

	<h4>JSON Serialization</h4>
	<p>
		In the Age of Ajax, instant utility and response times it's a fairly large oversight for an extremely in-efficeint JSON Serializer like JavaScriptSerializer 
		which was <a href="http://www.danrigsby.com/blog/index.php/2008/05/28/javascriptserializer-undeprecated-in-net-35-sp1/">previously deprecated</a> (presumably because of its poor impl?) 
		to be the prescribed JSON serializer for .NET developers. JavaScriptSerializer has no place in perf-conscience websites that have some developers 
		<a href="https://twitter.com/#!/MikaelEliasson/status/141113725263417344">resorting to ugly hacks</a> just to get decent performance.

	</p>
	<p>
		As JSON performance is fundamentally importantant in Internet websites we've replaced .NET's slowest serializer with <a href="http://www.servicestack.net/mythz_blog/?p=344">.NET's fastest JSON Serializer</a> for a <a href="benchmarks/default.htm#burningmonk-json">factor of times improvement</a>. <br/>
	</p>
	<p>
		Many websites have already changed their MVC websites to use ServiceStack's JsonSerializer including .NET's own <a href="http://www.stackoverflow.com">stackoverflow.com</a>.
	</p>

</div>


<span class="r"></span>
<div id="footer">
	Copyright &copy; 2011 Liquidbit Ltd. All rights reserved.
</div>

<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-7722718-7");
pageTracker._trackPageview();
} catch(err) {}</script>
</body>
</html>
